syntax on

"vunlde.vimで管理してるpluginを読み込む

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/unite.vim'
""Bundle 'Lokaltog/vim-powerline'
Bundle 'rails.vim'
Bundle 'snipMate'
Bundle 'thinca/vim-ref'
Bundle 'taglist.vim'
Bundle 'ref.vim'
Bundle 'vtreeexplorer'
Bundle 'mattn/vdbi-vim'
Bundle 'mattn/webapi-vim'

filetype plugin indent on

" Common -------------------------------
""set t_Co=256
set nocompatible
colorscheme desert

set t_Co=256
set cursorline
hi CursorLine   term=reverse cterm=none ctermbg=242

"カーソルキーで行末／行頭の移動可能に設定。
set whichwrap=b,s,[,],<,>
nnoremap h <Left>
nnoremap l <Right>

"insertモードでのカーソル形状変更"
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" 検索を循環させない
set nowrapscan

" バックアップファイルを作成しない
set nobackup

"インデント
set shiftwidth=2

" スワップファイルを作成しない
set noswapfile

" 対応括弧の瞬間強調時間
set matchtime=3

" 行番号表示
set number

" 見た目で行移動
nnoremap j gj
nnoremap k gk

" 削除でレジスタに格納しない(ビジュアルモードでの選択後は格納する)

nnoremap diw "_diw
nnoremap dw "_dw
nnoremap D "_D

"タブを空白で入力する
set expandtab

set tabstop=2
set softtabstop=2

"自動的にインデントする
set autoindent

"インクリメンタルサーチを行う
set incsearch

"検索に大文字小文字区別しない
set ic

" 文字コード関連
" 文字コードの自動解釈の優先順位
set fileencodings=utf-8,cp932,euc-jp

" 内部の解釈の文字コード　設定ファイルもこのコードで書け
set encoding=utf-8

" ヤンクをクリップボードへ送り込む
set clipboard+=unnamed

"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P

"ルーラーを表示
set ruler
set title

" 矩形選択で行末を超えてブロックを選択できるようにする
set virtualedit+=block

set hlsearch
"escでハイライトをオフ
nnoremap <silent> <ESC> <ESC>:noh<CR>
" ノーマルモード中でもエンターキーで改行挿入でノーマルモードに戻る
"noremap <CR> i<CR><ESC>

"insertモードでBackspaceを効かす
set backspace=indent,eol,start

inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap { {}<LEFT>
inoremap " ""<LEFT>
inoremap ' ''<LEFT>
vnoremap { "zdi^V{<C-R>z}<ESC>
vnoremap [ "zdi^V[<C-R>z]<ESC>
vnoremap ( "zdi^V(<C-R>z)<ESC>
vnoremap " "zdi^V"<C-R>z^V"<ESC>
vnoremap ' "zdi'<C-R>z'<ESC>


"入力モード時、ステータスラインのカラーを変更
augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#000099 guibg=#ccdc90
augroup END

" gvim用
nmap <M-n> :bn<CR>
nmap <M-p> :bN<CR>
"nmap <Down> <C-w><C-j>
nmap <C-n> <C-w><C-j>
nmap <C-p> <C-w><C-k>

"nmap > $a{
"nmap > $a;<CR>
nmap > $a
nmap , 0


"nnoremap <Space>m :MRU<CR>
nnoremap <Space>e :Explore<CR>
nnoremap <Space>q :q!<CR>
nnoremap <Space>vi vipy
nnoremap <Space>s :%s/
nnoremap <Space>gr :vimgrep // **/*.php \|cw<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT>
"nnoremap <Space>pri iprint_r($);exit();<CR><ESC>k<RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT>a
nnoremap <Space>aa ggVGx
nnoremap <Space>c :bd<CR>
nnoremap <Space>w :w!<CR>
inoremap <Space>w <Esc>:w<CR>
nnoremap <Space>, i<% %><Left><Left><Left>
inoremap <M-,> <% %><Left><Left><Left>
inoremap b<Tab> <br /><Esc> 
nnoremap <Space>/ /<C-r>*<CR>
inoremap ><Tab> <Space>=><Space>
inoremap .<Tab> ->
inoremap <C-h> <BS>
"nnoremap <C-l> :BufExplorer<CR>
nnoremap <C-m>m :Unite file_mru<CR>
"nnoremap <Space>m :Unite file_mru<CR>
nnoremap <C-l> :Unite buffer<CR>
nnoremap <Space>u :Unite buffer file_mru<CR>
nnoremap <Space>uf :Unite file<CR>
nnoremap <Space>ud :UniteWithCurrentDir file<CR>
map <Leader>x !python -m BeautifulSoup<CR>
let g:unite_enable_start_insert = 1
let g:unite_source_file_mru_limit = 200

nnoremap <C-l>r :!ruby %<CR>
inoremap <C-k> <ESC>

"neocomplcache
"let g:NeoComplCache_EnableAtStartup               = 1 
let g:NeoComplCache_MaxList                       = 20
let g:NeoComplCache_MinKeywordLength              = 2 
let g:NeoComplCache_MinSyntaxLength               = 2 
let g:NeoComplCache_SmartCase                     = 1 
let g:NeoComplCache_EnableCamelCaseCompletion     = 1
let g:NeoComplCache_EnableUnderbarCompletion      = 1
let g:neocomplcache_enable_at_startup = 1

imap <silent> <C-i> <Plug>(neocomplcache_snippets_expand)
smap <silent> <C-i> <Plug>(neocomplcache_snippets_expand)

let g:unite_cursor_line_highlight = 'TabLineSel'
