"------------------------------------------------------------------
" vim config file for windows.
"------------------------------------------------------------------

set nocompatible 
filetype on 

if has('vim_starting')
  set runtimepath+=~/.vim/neobundle/neobundle.vim
  call neobundle#rc(expand('~/.vim/neobundle'))
endif

" Plugin definition for NeoBundle
NeoBundle 'gmarik/vundle' 
NeoBundle 'tpope/vim-rails'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'git://github.com/Shougo/neobundle.vim.git'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \ 'windows' : 'make -f make_mingw32.mak',
      \ 'cygwin' : 'make -f make_cygwin.mak',
      \ 'mac' : 'make -f make_mac.mak',
      \ 'unix' : 'make -f make_unix.mak',
      \ },
      \ }
NeoBundle 'rails.vim'
NeoBundle 'thinca/vim-ref'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'ref.vim'
NeoBundle 'vtreeexplorer'
NeoBundle 'scrooloose/nerdcommenter.git'
NeoBundle 'scrooloose/nerdtree.git'
NeoBundle 'tomtom/tcomment_vim.git'
NeoBundle 'mattn/gist-vim'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'mattn/togetter-vim'
NeoBundle 'mattn/mkdpreview-vim'
NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'mrkn/mrkn256.vim'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'motemen/git-vim'
NeoBundle 'gregsexton/gitv'

filetype plugin indent on 

let mapleader = ";"

set runtimepath+=$VIMRUNTIME/after

"カーソルキーで行末／行頭の移動可能に設定。
set whichwrap=b,s,[,],<,>
nnoremap h <Left>
nnoremap l <Right>

" 検索を循環させない
set nowrapscan

" バックアップファイルを作成しない
set nobackup

"インデント
set shiftwidth=2

" スワップファイルを作成しない
set noswapfile

" 対応括弧の瞬間強調時間
set matchtime=3

" 行番号表示
set number

" 見た目で行移動
nnoremap j gj
nnoremap k gk

" 削除でレジスタに格納しない(ビジュアルモードでの選択後は格納する)
nnoremap x "_x
"nnoremap dd "_dd
nnoremap diw "_diw
nnoremap dw "_dw
nnoremap D "_D

"タブを空白で入力する
set expandtab

"標準タブは4
set tabstop=2
set softtabstop=2

"自動的にインデントする
set autoindent

"インクリメンタルサーチを行う
set incsearch

"検索に大文字小文字区別しない
set ic

" 文字コード関連
let &termencoding = &encoding
" 文字コードの自動解釈の優先順位
set fileencodings=utf-8,cp932,euc-jp

" 内部の解釈の文字コード　設定ファイルもこのコードで書け
set encoding=utf-8

" ヤンクをクリップボードへ送り込む
set clipboard+=unnamed

"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P

"ルーラーを表示
set ruler
set title

" 矩形選択で行末を超えてブロックを選択できるようにする
set virtualedit+=block

"escでハイライトをオフ
nnoremap <silent> <ESC> <ESC>:noh<CR>
" ノーマルモード中でもエンターキーで改行挿入でノーマルモードに戻る
"noremap <CR> i<CR><ESC>

inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap { {}<LEFT>
inoremap " ""<LEFT>
inoremap ' ''<LEFT>
vnoremap { "zdi^V{<C-R>z}<ESC>
vnoremap [ "zdi^V[<C-R>z]<ESC>
vnoremap ( "zdi^V(<C-R>z)<ESC>
vnoremap " "zdi^V"<C-R>z^V"<ESC>
vnoremap ' "zdi'<C-R>z'<ESC>


"入力モード時、ステータスラインのカラーを変更
augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#000099 guibg=#ccdc90
augroup END

" gvim用
nmap <M-n> :bn<CR>
nmap <M-p> :bN<CR>
nmap <Down> <C-w><C-j>
nmap <Up> <C-w><C-k>
nmap <C-n> <C-w><C-j>
nmap <C-p> <C-w><C-k>

"nmap > $a{
"nmap > $a;<CR>
nmap > $a
nmap , 0

"----------------------------------------
" Kaoriya対策
"----------------------------------------
""""""""""""""""""""""""""""""
"g:no_vimrc_exampleを利用してvimrc_example.vimを無効化している時はここで読込
""""""""""""""""""""""""""""""
""if exists('g:no_vimrc_example') && g:no_vimrc_example == 1
""  silent! source $VIMRUNTIME/vimrc_example.vim
""endif

autocmd WinEnter *  setlocal cursorline
autocmd WinLeave *  setlocal nocursorline
set cursorline

"ウィンドウ位置
":winpos 318 1
:winpos 538 100

"変更中のファイルでも、保存しないで他のファイルを表示
set hidden

" 独自キーバインド
nnoremap <leader>e :w!<CR>
inoremap <leader>e <ESC>:w!<CR>
nnoremap <leader>vi vipy
nnoremap <leader>s :%s/
nnoremap <leader>gr :vimgrep // **/*.php \|cw<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT>
nnoremap <leader>aa ggVGx
nnoremap <leader>c :bd<CR>
nnoremap <leader>w :w!<CR>
inoremap <leader>w <Esc>:w<CR>
nnoremap <leader>, i<% %><Left><Left><Left>
inoremap <M-,> <% %><Left><Left><Left>
inoremap b<Tab> <br /><Esc> 
nnoremap <leader>/ /<C-r>*<CR>
inoremap ><Tab> <Space>=><Space>
inoremap .<Tab> ->
nnoremap <C-m>m :Unite file_mru<CR>
nnoremap <C-l> :Unite buffer<CR>
nnoremap <leader>u :Unite buffer file_mru<CR>
nnoremap <leader>uf :Unite file<CR>
nnoremap <leader>ud :UniteWithCurrentDir file<CR>
nnoremap <leader>v vep
nnoremap <Leader>t :VTreeExplore<CR>
nnoremap <Leader>tf :FriendsTwitter<CR>
nnoremap <Leader>tr :RefreshTwitter<CR>
map <Leader>x !python -m BeautifulSoup<CR>
nnoremap <Leader>q :TComment<CR>
vnoremap <Leader>q :TComment<CR>
nnoremap <Leader>gv :GitLogViewer<CR>
nnoremap <leader>r :!ruby %<CR>
nnoremap <leader>d :bd!<CR>

let g:unite_enable_start_insert = 1
let g:unite_source_file_mru_limit = 200

inoremap <C-k> <ESC>
let twitvim_login_b64 = "dF9yYW11OmhhbmVwYXNzNw=="
let twitvim_count = 200
let twitvim_browser_cmd = 'C:\Program Files (x86)\Mozilla Firefox\firefox.exe'


"カレントディレクトリ変更スクリプト"
command! -nargs=? -complete=dir -bang CD  call s:ChangeCurrentDir('<args>', '<bang>') 
function! s:ChangeCurrentDir(directory, bang)
    if a:directory == ''
        lcd %:p:h
    else
        execute 'lcd' . a:directory
    endif

    if a:bang == ''
        pwd
    endif
endfunction

" Change current directory.
nnoremap <silent> <leader>cd :<C-u>CD<CR>

"neocomplcache
""let g:NeoComplCache_EnableAtStartup               = 0
let g:NeoComplCache_MaxList                       = 20
let g:NeoComplCache_MinKeywordLength              = 2 
let g:NeoComplCache_MinSyntaxLength               = 2 
let g:NeoComplCache_SmartCase                     = 1 
let g:NeoComplCache_EnableCamelCaseCompletion     = 1
let g:NeoComplCache_EnableUnderbarCompletion      = 1
let g:neocomplcache_enable_at_startup             = 1
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell',
    \ }

" TABでスニペットを展開
let g:neocomplcache_snippets_dir = $HOME . '/vimfiles/snippets'
inoremap <expr><Tab>  pumvisible() ? "\<C-n>" : "\<TAB>"
imap <silent> <Tab> <Plug>(neocomplcache_snippets_expand)
smap <silent> <Tab> <Plug>(neocomplcache_snippets_expand)

nnoremap <silent> ciy ciw<C-r>0<ESC>:let@/=@1<CR>:noh<CR>
nnoremap <silent> cy   ce<C-r>0<ESC>:let@/=@1<CR>:noh<CR>

"ファイルオープン時にカレントディレクトリ変更
:au BufEnter *.php,*.ctp,*.m,*.h execute ":lcd " . expand("%:p:h")

let g:buftabs_only_basename=1
let g:buftabs_in_statusline=1

"改行コード
set fileformats=unix,dos

autocmd BufNewFile,BufRead *.psgi set filetype=perl fenc=utf-8
au FileType html set ts=2 sw=2 expandtab
au FileType javascript set ts=2 sw=2 expandtab
au FileType php set ts=4 sw=4 expandtab
au BufNewFile *.js set ft=javascript fenc=utf-8


""if !exists('g:tcomment_types')
""  let g:tcomment_types = {}
""endif
""let g:tcomment_types['rb'] = '# %s'

"gist-vim
let g:gist_detect_filetype = 1

"powerline
set t_Co=256
let g:Powerline_colorscheme = 'default'

" Inspired by ujihisa's vimrc
function! s:GitLogViewer()
  " vnewだとコミットメッセージが切れてしまうのでnew
  new
  VimProcRead git log -u "ORIG_HEAD..HEAD"
  set filetype=git-log.git-diff
  setlocal foldmethod=expr
  setlocal foldexpr=getline(v:lnum)=~'^commit'?'>1':getline(v:lnum+1)=~'^commit'?'<1':'='
  setlocal foldtext=FoldTextOfGitLog()
endfunction
command! GitLogViewer call s:GitLogViewer()

" git log表示時の折りたたみ用
function! FoldTextOfGitLog()
  let month_map = {
    \ 'Jan' : '01',
    \ 'Feb' : '02',
    \ 'Mar' : '03',
    \ 'Apr' : '04',
    \ 'May' : '05',
    \ 'Jun' : '06',
    \ 'Jul' : '07',
    \ 'Aug' : '08',
    \ 'Sep' : '09',
    \ 'Oct' : '10',
    \ 'Nov' : '11',
    \ 'Dec' : '12',
    \ }

  if getline(v:foldstart) !~ '^commit'
    return getline(v:foldstart)
  endif

  if getline(v:foldstart + 1) =~ '^Author:'
    let author_lnum = v:foldstart + 1
  elseif getline(v:foldstart + 2) =~ '^Author:'
    " commitの次の行がMerge:の場合があるので
    let author_lnum = v:foldstart + 2
  else
    " commitの下2行がどちらもAuthor:で始まらなければ諦めて終了
    return getline(v:foldstart)
  endif

  let date_lnum = author_lnum + 1
  let message_lnum = date_lnum + 2

  let author = matchstr(getline(author_lnum), '^Author: \zs.*\ze <.\{-}>')
  let date = matchlist(getline(date_lnum), ' \(\a\{3}\) \(\d\{1,2}\) \(\d\{2}:\d\{2}:\d\{2}\) \(\d\{4}\)')
  let message = getline(message_lnum)

  let month = date[1]
  let day = printf('%02s', date[2])
  let time = date[3]
  let year = date[4]

  let datestr = join([year, month_map[month], day], '-')

  return join([datestr, time, author, message], ' ')
endfunction

" Gitv 設定
autocmd FileType gitv call s:my_gitv_settings()
function! s:my_gitv_settings()
  setlocal iskeyword+=/,-,.
  nnoremap <silent><buffer> C :<C-u>Git checkout <C-r><C-w><CR> 
  nnoremap <buffer> <Space>rb :<C-u>Git rebase <C-r>=GitvGetCurrentHash()<CR><Space>
  nnoremap <buffer> <Space>R :<C-u>Git revert <C-r>=GitvGetCurrentHash()<CR><CR>
  nnoremap <buffer> <Space>h :<C-u>Git cherry-pick <C-r>=GitvGetCurrentHash()<CR><CR>
  nnoremap <buffer> <Space>rh :<C-u>Git reset --hard <C-r>=GitvGetCurrentHash()<CR>
  nnoremap <silent><buffer> t :<C-u>windo call <SID>toggle_git_folding()<CR>1<C-w>w
endfunction

function! s:gitv_get_current_hash()
  return matchstr(getline('.'), '\[\zs.\{7\}\ze\]$')
endfunction

autocmd FileType git setlocal nofoldenable foldlevel=0
function! s:toggle_git_folding()
  if &filetype ==# 'git'
    setlocal foldenable!
  endif
endfunction
